name: Cypress Test
on:
   # Run on any commit to the #master branch
   push:
      branches: [master]

   # Run on pull requests into the #master branch

   pull_request:
      branches: [master]

   # Allows user to trigger the workflow from GitHub's web UI
   workflow_dispatch:

jobs:
   cypress-test:
      runs-on: ubuntu-latest
      steps:
         # Setup
         - uses: digi-serve/ab-install-action@v1
           with:
              folder: ab
              port: 8080

         # Up
         - name: Bring up AppBuilder
           run: ./UP.sh -q -t
           working-directory: ./ab

         - name: Check out
           uses: actions/checkout@v2
           with:
              path: ab/test/e2e/cypress/integration/cars_app

         #Run test
         - name: Run Cypress Tests
           uses: cypress-io/github-action@v2
           with:
              working-directory: ./ab
              project: ./test/e2e
              config: baseUrl=http://localhost:8080,testFiles=**/*.js,responseTimeout=100000,defaultCommandTimeout=30000,retries=2
              install: false
              browser: chrome

              # Wait for the site to be ready
              wait-on: "http://localhost:8080"
              wait-on-timeout: 300

              # We need to set the stack name as an environment variable for
              # the test reset script.
              env: stack=ab

         - uses: actions/upload-artifact@v2
           if: failure()
           with:
              name: cypress-screenshots
              path: ./ab/test/e2e/cypress/screenshots

   # if its a push event and tests passed update ab_service_web           
   update_ab_service_web:
      name: Multi-Tenants Application Update
      needs: cypress-test
      if: ${{ github.event_name == 'push' }} 
      runs-on: ubuntu-latest
      strategy:
         matrix:
            include:
               - branch: master
      steps:
         - name: Preparing the file "package.json"
           run: |
            echo '
               {
                  "name": "multitenants_app_update",
                  "version": "1.0.0",
                  "description": "",
                  "main": "index.js",
                  "scripts": {
                     "start": "node index.js"
                  },
                  "author": "guyyoo",
                  "license": "ISC",
                  "dependencies": {
                     "axios": "^0.27.2"
                  }
               }
            ' > package.json &&
            npm i
         - uses: actions/checkout@v3
           with:
               path: ./app
   
         - name: Multi-Tenants app update
           run: |
            echo '
               const axios = require("axios");

               (async () => {
                  console.log();
                  console.log("Multi-Tenant Update - Start!");
                  console.log();

                  const headers = {
                     "tenant-token": "admin",
                     "user-token": "${{ secrets.SERVER_CHILDATRISK_TENANT_ADMIN_USER_TOKEN_ADMIN }}",
                  };
                  const url = "https://${{ secrets.SERVER_CHILDATRISK_TENANT_ADMIN_URL }}/definition/tenants-update-application";
                  const data = require("./app/test_import/module.json");
                  const application = data.definitions.find((e) => {
                     return e.type === "application";
                  });
                  const date = new Date();
                  const fileString = JSON.stringify(data);
                  const templateDataLength = 10000;
                  const template = {
                     applicationUUID: application.id,
                     state: 0,
                     date,
                  };

                  try {
                     console.log("Multi-Tenant Update - Tranfering... the definition.");
                     console.log();

                     await axios({
                        method: "post",
                        headers,
                        url,
                        data: template,
                     });
                  
                     template.state = 1;

                     const writeLoops = Math.ceil(fileString.length/templateDataLength);

                     for (let i = 0; i < writeLoops; i++) {
                        template.data = fileString.slice(
                           i*templateDataLength,
                           (i + 1)*templateDataLength < fileString.length
                              ? (i + 1)*templateDataLength
                              : fileString.length
                        );

                        await axios({
                           method: "post",
                           headers,
                           url,
                           data: template,
                        });

                        console.log(`Multi-Tenant Update - Complete ...${100*(i + 1)/writeLoops}%`);
                     }
                     console.log();

                     template.state = 2;

                     delete template.data;

                     console.log("Multi-Tenant Update - The server is importing... the definition!");
                     console.log();

                     await axios({
                        method: "post",
                        headers,
                        url,
                        data: template,
                     });

                     console.log("Multi-Tenant Update - DONE!");
                     console.log();
                  } catch (error) {
                     console.error("Multi-Tenant Update - Error!")
                     console.error();
                     console.error(error);
                     console.error();
                  }
               })();
            ' > index.js &&
            node index.js
